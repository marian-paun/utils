#! /usr/bin/bash

# Set the age ranges in days
ages=(0 1 3 7 15 30 60 90 180 365 730 1095 1460 1825)
# Initialize the counts and sizes to zero
counts=(0 0 0 0 0 0 0 0 0 0 0 0 0 0)
sizes=(0 0 0 0 0 0 0 0 0 0 0 0 0 0)

# Iterate through the age ranges
for i in $(seq 0 $((${#ages[@]} - 2))); do
  # Find the files in the current age range
  if [[ $i -eq 0 ]];
    then files=$(find . -mtime "-${ages[$i+1]}" -type f -printf '%P\n');
  else
    files=$(find . -mtime "-${ages[$i+1]}" -mtime +"${ages[$i]}" -type f -printf '%P\n');
  fi
  # Count the files
  counts[$i]=$(echo "$files" | wc -l)
  # Calculate the total size of the files
  total_size=0
  IFS=$'\n'
  for file in ${files}; do
    if [[ "${file}" != \.* ]]; then total_size=$((total_size + $(stat -c%s "$file"))); fi
  done
  sizes[$i]=$total_size
done

for i in $(seq 0 $((${#ages[@]} - 1))); do
  total_size_mb=0
  total_size_gb=0
  if [[ ${counts[$i]} -gt 0 && ${sizes[$i]} -gt 0 ]]; then
    total_size_mb=$(printf "%'.3f" $(echo "scale=3; ${sizes[$i]} / (1024 * 1024)" | bc))
    total_size_gb=$(printf "%'.3f" $(echo "scale=3; ${sizes[$i]} / (1024 * 1024 * 1024)" | bc))

    if [[ $(echo "${total_size_gb} < 1" | bc -q ) == 1 ]]; then
       printf "%'6d files between %4d and %4d days old, size: %11.2f MB\n" "${counts[$i]}" "${ages[$i]}" "${ages[$i+1]}" "${total_size_mb}"
    else
       printf "%'6d files between %4d and %4d days old, size: %11.2f GB\n" "${counts[$i]}" "${ages[$i]}" "${ages[$i+1]}" "${total_size_gb}"
    fi
  fi
done
