#!/usr/bin/env bash

# Set the age ranges in days
ages=(0 1 3 7 15 21 30 60 90 180 365 730 1095 1460 1825)
declare -A counts sizes durations

# Function to get duration in seconds
get_duration() {
    ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$1" 2>/dev/null | cut -d. -f1
}

# Function to generate ASCII histogram
generate_histogram() {
    local -n data=$1
    local max=$2
    local scale=$3

    # Check if max is zero
    if [[ $max -eq 0 ]]; then
        echo "No data to display."
        return
    fi

    for i in "${!data[@]}"; do
        local value=${data[$i]}
        local bar_length=0
        if [[ $value -ne 0 ]]; then
            bar_length=$(( (value * scale) / max ))
        fi
        printf "%4d-%4d days: %5d |%s\n" "${ages[$i]}" "${ages[$i+1]}" "$value" "$(printf '%0.s#' $(seq 1 $bar_length))"
    done
}
# Process files
while IFS= read -r -d '' file; do
    age=$(( ($(date +%s) - $(date -r "$file" +%s)) / 86400 ))
    for i in "${!ages[@]}"; do
        if [[ $age -ge ${ages[$i]} && $age -lt ${ages[$i+1]} ]]; then
            ((counts[$i]++))
            sizes[$i]=$((sizes[$i] + $(stat -c%s "$file")))
            durations[$i]=$((durations[$i] + $(get_duration "$file")))
            break
        fi
    done
done < <(find . -type f -print0)

# Calculate grand totals and prepare output
grand_total_count=0
grand_total_size=0
grand_total_duration=0
output=""

for i in "${!ages[@]}"; do
    [[ $i -eq $((${#ages[@]} - 1)) ]] && break
    count=${counts[$i]:-0}
    size=${sizes[$i]:-0}
    duration=${durations[$i]:-0}

    if [[ $count -ne 0 && $size -ne 0 ]]; then
        size_gb=$(bc <<< "scale=3; $size / (1024 * 1024 * 1024)")
        duration_hours=$(bc <<< "scale=2; $duration / 3600")

        output+=$(printf "%'5d files between %4d and %4d days old, size: %10.3f GB, duration: %8.2f hours\n" \
                         "$count" "${ages[$i]}" "${ages[$i+1]}" "$size_gb" "$duration_hours")

        grand_total_count=$((grand_total_count + count))
        grand_total_size=$((grand_total_size + size))
        grand_total_duration=$((grand_total_duration + duration))
    fi
done

# Print results
echo "$output"
printf "\nTotal: %'d files, size: %10.3f GB, duration: %8.2f hours\n" \
       "$grand_total_count" \
       "$(bc <<< "scale=3; $grand_total_size / (1024 * 1024 * 1024)")" \
       "$(bc <<< "scale=2; $grand_total_duration / 3600")"

# Generate and print histograms
echo -e "\nFile Count Histogram:"
generate_histogram counts $grand_total_count 50

echo -e "\nTotal Size Histogram (GB):"
generate_histogram sizes $grand_total_size 50

echo -e "\nTotal Duration Histogram (hours):"
generate_histogram durations $grand_total_duration 50
