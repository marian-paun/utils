#!/usr/bin/bash

# Set the age ranges in days
ages=(0 1 3 7 15 21 30 60 90 180 270 365 730 1095 1460 1825)

# Initialize the counts, sizes, and durations to zero
counts=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
sizes=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
durations=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)

# Function to get duration in seconds
get_duration() {
    duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$1" 2>/dev/null)
    if [[ $? -eq 0 && -n "$duration" ]]; then
        echo "${duration%.*}"  # Remove decimal part
    else
        echo "0"
    fi
}

# Iterate through the age ranges
for i in $(seq 0 $((${#ages[@]} - 2))); do
    # Find the files in the current age range

  if [[ $i -eq 0 ]];
    then files=$(find . -mtime "-${ages[$i+1]}" -type f -printf '%P\n');
  else
    files=$(find . -mtime "-${ages[$i+1]}" -mtime +"${ages[$i]}" -type f -printf '%P\n');
  fi
#    files=$(find . -mtime "-${ages[$i+1]}" -mtime +"${ages[$i]}" -type f -printf '%P\n')
    
    # Count the files
    counts[$i]=$(echo "$files" | wc -l)
    
    # Calculate the total size and duration of the files
    total_size=0
    total_duration=0
    IFS=$'\n'
    for file in ${files}; do
        if [[ "${file}" != .* ]]; then
            total_size=$((total_size + $(stat -c%s "$file")))
            duration=$(get_duration "$file")
            total_duration=$((total_duration + duration))
        fi
    done
    sizes[$i]=$total_size
    durations[$i]=$total_duration
done

# Initialize grand totals
grand_total_count=0
grand_total_size=0
grand_total_duration=0

for i in $(seq 0 $((${#ages[@]} - 2))); do
    if [[ ${counts[$i]} -ne 0 && ${sizes[$i]} -ne 0 ]]; then
        total_size_mb=$(printf "%'.3f" $(echo "scale=3; ${sizes[$i]} / (1024 * 1024)" | bc))
        total_size_gb=$(printf "%'.3f" $(echo "scale=3; ${sizes[$i]} / (1024 * 1024 * 1024)" | bc))
        
        # Convert duration to hours with 2 decimal places
        duration_hours=$(printf "%.2f" $(echo "scale=2; ${durations[$i]} / 3600" | bc))
        
        if [[ $(echo "${total_size_gb} < 1" | bc -q ) == 1 ]]; then
            printf "%'5d files between %4d and %4d days old, size: %10.2f MB, duration: %8.2f hours\n" "${counts[$i]}" "${ages[$i]}" "${ages[$i+1]}" "${total_size_mb}" "${duration_hours}"
        else
            printf "%'5d files between %4d and %4d days old, size: %10.2f GB, duration: %8.2f hours\n" "${counts[$i]}" "${ages[$i]}" "${ages[$i+1]}" "${total_size_gb}" "${duration_hours}"
        fi

        # Update grand totals
        grand_total_count=$((grand_total_count + counts[i]))
        grand_total_size=$((grand_total_size + sizes[i]))
        grand_total_duration=$((grand_total_duration + durations[i]))
    fi
done

# Print grand total line
grand_total_size_gb=$(printf "%'.3f" $(echo "scale=3; ${grand_total_size} / (1024 * 1024 * 1024)" | bc))
grand_total_duration_hours=$(printf "%.2f" $(echo "scale=2; ${grand_total_duration} / 3600" | bc))
printf "\nTotal: %'d files, size: %10.2f GB, duration: %8.2f hours\n" "${grand_total_count}" "${grand_total_size_gb}" "${grand_total_duration_hours}"
